/*
 * HSIView.java
 *
 * Created on May 4, 2006, 10:02 AM
 */
package com.nrims;

import java.awt.Component;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.SpinnerNumberModel;

/**
 * @author  Douglas Benson
 * @author <a href="mailto:rob.gonzalez@gmail.com">Rob Gonzalez</a>
 */
public class HSIView extends JPanel {

    public static final long serialVersionUID = 1;
    private boolean bUpdating = false;
    private UI ui = null;
    private HSIProps props = new com.nrims.HSIProps();
    private DefaultListModel listModel = new DefaultListModel();

    /**
     * @param ui UI into which the HSIView will be created.
     */
    public HSIView(UI ui) {
        this.ui = ui;
        initComponents();
        rartioMaxjSpinner.setModel(new SpinnerNumberModel(1.0, 0.001, 65535.0, 1));
        ratioMinjSpinner.setModel(new SpinnerNumberModel(0.0, 0.0, 65535.0, 1));
        numThresholdjSpinner.setModel(new SpinnerNumberModel(3, 0, 65535, 1));
        denThresholdjSpinner.setModel(new SpinnerNumberModel(3, 0, 65535, 1));
        jList1.setModel(listModel);
        jList1.setCellRenderer(new MyCellRenderer(this.ui));
              
        updateImage();
    // update();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jTextField1 = new javax.swing.JTextField();
      displayHSIjButton = new javax.swing.JButton();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      rartioMaxjSpinner = new javax.swing.JSpinner();
      jLabel5 = new javax.swing.JLabel();
      ratioMinjSpinner = new javax.swing.JSpinner();
      jButton2 = new javax.swing.JButton();
      jLabel6 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      numThresholdjSpinner = new javax.swing.JSpinner();
      jLabel8 = new javax.swing.JLabel();
      denThresholdjSpinner = new javax.swing.JSpinner();
      rgbMaxjLabel = new javax.swing.JLabel();
      jLabel12 = new javax.swing.JLabel();
      transparencyjComboBox = new javax.swing.JComboBox();
      jLabel13 = new javax.swing.JLabel();
      scalebarjComboBox = new javax.swing.JComboBox();
      rgbMaxjSlider = new javax.swing.JSlider();
      medianFilterjButton = new javax.swing.JRadioButton();
      medianRadiusjSpinner = new javax.swing.JSpinner();
      rgbMinjSlider = new javax.swing.JSlider();
      rgbMinjLabel = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jList1 = new javax.swing.JList();
      displayRatiojButton = new javax.swing.JButton();
      addRatiojButton = new javax.swing.JButton();
      removeRatiojButton = new javax.swing.JButton();
      hsiSumRadioButton = new javax.swing.JRadioButton();
      hsiWindowRadioButton = new javax.swing.JRadioButton();
      hsiWindowjSpinner = new javax.swing.JSpinner();

      jTextField1.setText("jTextField1");

      displayHSIjButton.setText("Display HSI");
      displayHSIjButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            displayHSIjButtonActionPerformed(evt);
         }
      });

      jLabel3.setText("Ratio Range");

      jLabel4.setText("Max");

      rartioMaxjSpinner.setToolTipText("Max Ratio in HSI");
      rartioMaxjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rartioMaxjSpinnerStateChanged(evt);
         }
      });

      jLabel5.setText("Min");

      ratioMinjSpinner.setToolTipText("Min Ratio in HSI");
      ratioMinjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            ratioMinjSpinnerStateChanged(evt);
         }
      });

      jButton2.setText("Auto");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
         }
      });

      jLabel6.setText("Threshold");

      jLabel7.setText("Num");

      numThresholdjSpinner.setToolTipText("Min Numerator value");
      numThresholdjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            numThresholdjSpinnerStateChanged(evt);
         }
      });

      jLabel8.setText("Den");

      denThresholdjSpinner.setToolTipText("Min Denominator value");
      denThresholdjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            denThresholdjSpinnerStateChanged(evt);
         }
      });

      rgbMaxjLabel.setText("RGB Max: 255");
      rgbMaxjLabel.setMaximumSize(new java.awt.Dimension(100, 16));
      rgbMaxjLabel.setMinimumSize(new java.awt.Dimension(100, 16));
      rgbMaxjLabel.setPreferredSize(new java.awt.Dimension(100, 16));

      jLabel12.setText("Transparency");

      transparencyjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Max Num,Den", "Numerator", "Denominator", "Min Num,Den", "Mean Num,Den", "Sum Num,Den", "RMS Num,Den" }));
      transparencyjComboBox.setToolTipText("Intensity component of HSI");
      transparencyjComboBox.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            transparencyjComboBoxItemStateChanged(evt);
         }
      });

      jLabel13.setText("Label");

      scalebarjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Off", "Scale", "Scale+Labels" }));
      scalebarjComboBox.setToolTipText("Show Scale and Labels");
      scalebarjComboBox.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            scalebarjComboBoxItemStateChanged(evt);
         }
      });

      rgbMaxjSlider.setFont(new java.awt.Font("Dialog", 0, 10));
      rgbMaxjSlider.setMajorTickSpacing(50);
      rgbMaxjSlider.setMaximum(255);
      rgbMaxjSlider.setPaintLabels(true);
      rgbMaxjSlider.setPaintTicks(true);
      rgbMaxjSlider.setValue(255);
      rgbMaxjSlider.setMaximumSize(new java.awt.Dimension(200, 16));
      rgbMaxjSlider.setMinimumSize(new java.awt.Dimension(200, 16));
      rgbMaxjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rgbMaxjSliderStateChanged(evt);
         }
      });

      medianFilterjButton.setText("Median Filter Ratio   Radius:");
      medianFilterjButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            medianFilterjButtonActionPerformed(evt);
         }
      });

      medianRadiusjSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), Double.valueOf(0.5d), null, Double.valueOf(0.5d)));
      medianRadiusjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            medianRadiusjSpinnerStateChanged(evt);
         }
      });

      rgbMinjSlider.setFont(new java.awt.Font("Dialog", 0, 10));
      rgbMinjSlider.setMajorTickSpacing(50);
      rgbMinjSlider.setMaximum(255);
      rgbMinjSlider.setPaintLabels(true);
      rgbMinjSlider.setPaintTicks(true);
      rgbMinjSlider.setValue(0);
      rgbMinjSlider.setMaximumSize(new java.awt.Dimension(200, 16));
      rgbMinjSlider.setMinimumSize(new java.awt.Dimension(200, 16));
      rgbMinjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rgbMinjSliderStateChanged(evt);
         }
      });

      rgbMinjLabel.setText("RGB Min: 0");
      rgbMinjLabel.setMaximumSize(new java.awt.Dimension(100, 16));
      rgbMinjLabel.setMinimumSize(new java.awt.Dimension(100, 16));
      rgbMinjLabel.setPreferredSize(new java.awt.Dimension(100, 16));

      jScrollPane1.setViewportView(jList1);

      displayRatiojButton.setText("Display Ratio");
      displayRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            displayRatiojButtonActionPerformed(evt);
         }
      });

      addRatiojButton.setText("Add...");
      addRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            addRatiojButtonActionPerformed(evt);
         }
      });

      removeRatiojButton.setText("Remove");
      removeRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeRatiojButtonActionPerformed(evt);
         }
      });

      hsiSumRadioButton.setText("Use Sum");
      hsiSumRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            hsiSumRadioButtonActionPerformed(evt);
         }
      });

      hsiWindowRadioButton.setText("Use Window +/- ");
      hsiWindowRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            hsiWindowRadioButtonActionPerformed(evt);
         }
      });

      hsiWindowjSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
      hsiWindowjSpinner.setEnabled(false);
      hsiWindowjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            hsiWindowjSpinnerStateChanged(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(layout.createSequentialGroup()
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(rgbMaxjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel12))
                     .add(rgbMinjLabel, 0, 0, Short.MAX_VALUE))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(layout.createSequentialGroup()
                        .add(transparencyjComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel13)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(scalebarjComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                     .add(rgbMaxjSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(rgbMinjSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 262, Short.MAX_VALUE))
               .add(layout.createSequentialGroup()
                  .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                     .add(removeRatiojButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .add(addRatiojButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .add(displayRatiojButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 394, Short.MAX_VALUE))
               .add(layout.createSequentialGroup()
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                           .add(jLabel6)
                           .add(jLabel3))
                        .add(43, 43, 43)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                           .add(layout.createSequentialGroup()
                              .add(jLabel7)
                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                              .add(numThresholdjSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                              .add(28, 28, 28)
                              .add(jLabel8)
                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                              .add(denThresholdjSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                           .add(layout.createSequentialGroup()
                              .add(3, 3, 3)
                              .add(jLabel4)
                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                              .add(rartioMaxjSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                              .add(30, 30, 30)
                              .add(jLabel5)
                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                              .add(ratioMinjSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                     .add(layout.createSequentialGroup()
                        .add(medianFilterjButton)
                        .add(2, 2, 2)
                        .add(medianRadiusjSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(27, 27, 27)))
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(displayHSIjButton)
                     .add(jButton2))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(hsiSumRadioButton)
                     .add(layout.createSequentialGroup()
                        .add(hsiWindowRadioButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(hsiWindowjSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                  .add(27, 27, 27)))
            .add(18, 18, 18))
      );

      layout.linkSize(new java.awt.Component[] {denThresholdjSpinner, numThresholdjSpinner, rartioMaxjSpinner, ratioMinjSpinner}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(layout.createSequentialGroup()
                  .add(displayRatiojButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(addRatiojButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(removeRatiojButton))
               .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(layout.createSequentialGroup()
                  .add(hsiSumRadioButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(hsiWindowRadioButton)
                     .add(hsiWindowjSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
               .add(layout.createSequentialGroup()
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                     .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(medianFilterjButton)
                        .add(medianRadiusjSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                     .add(displayHSIjButton))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                     .add(jLabel6)
                     .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                           .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                              .add(rartioMaxjSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                              .add(jLabel3)
                              .add(jLabel4))
                           .add(jLabel5)
                           .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                              .add(ratioMinjSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                              .add(jButton2)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                           .add(numThresholdjSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                           .add(jLabel7)
                           .add(denThresholdjSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                           .add(jLabel8))
                        .add(2, 2, 2)))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(rgbMaxjSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(rgbMaxjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(rgbMinjSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(rgbMinjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                     .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(transparencyjComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel12))
                     .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(scalebarjComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel13)))))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

    private void rgbMaxjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rgbMaxjSliderStateChanged
        if (bUpdating) {//GEN-LAST:event_rgbMaxjSliderStateChanged
            return;
        }
        final int val = rgbMaxjSlider.getValue();

        props.setMaxRGB(val);
        rgbMaxjLabel.setText("RGB Max: " + val);
        
        //change min slider limits in response
        int range = (rgbMinjSlider.getMaximum() - rgbMinjSlider.getMinimum());
        int spacing = java.lang.Math.round(range/5)+1;
        rgbMinjSlider.setMaximum(val-1);
        rgbMinjSlider.setMajorTickSpacing(spacing);
        rgbMinjSlider.setLabelTable(rgbMinjSlider.createStandardLabels(spacing)); 
        rgbMinjSlider.repaint();
        //needs to be called to update image
        update(false);

}                                          

    private void denThresholdjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_denThresholdjSpinnerStateChanged
        if (bUpdating) {
            return;
        }
        props.setMinDen(new Integer(denThresholdjSpinner.getValue().toString()));
        update(false);
}//GEN-LAST:event_denThresholdjSpinnerStateChanged

    private void numThresholdjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numThresholdjSpinnerStateChanged
        if (bUpdating) {
            return;
        }
        props.setMinNum(new Integer(numThresholdjSpinner.getValue().toString()));
        update(false);
}//GEN-LAST:event_numThresholdjSpinnerStateChanged

    private void ratioMinjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ratioMinjSpinnerStateChanged
        if (bUpdating) {
            return;
        }
        props.setMinRatio(new Double(ratioMinjSpinner.getValue().toString()));
        update(false);
}//GEN-LAST:event_ratioMinjSpinnerStateChanged

    private void rartioMaxjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rartioMaxjSpinnerStateChanged
       if (bUpdating) {
            return;
        }
        props.setMaxRatio(new Double(rartioMaxjSpinner.getValue().toString()));
        update(false);
}//GEN-LAST:event_rartioMaxjSpinnerStateChanged

    private void displayHSIjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayHSIjButtonActionPerformed
        if (bUpdating) {
            return;        
        // Get the selected ratio images. Each element
        // should have the form 2:1 or 4:3 etc. 
        }
        Object[] idx = jList1.getSelectedValues();

        // Generate images
        for (int i = 0; i < idx.length; i++) {
            String label = (String) idx[i];
            int numerator = new Integer(label.substring(0, label.indexOf(":"))).intValue();
            int denomator = new Integer(label.substring(label.indexOf(":") + 1, label.length())).intValue();
            props.setNumMass(numerator);
            props.setDenMass(denomator);
            update(false);
            
            displayHSI();
            updateInternalImages();
        }
}//GEN-LAST:event_displayHSIjButtonActionPerformed

    private void scalebarjComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_scalebarjComboBoxItemStateChanged
        if (bUpdating) {
            return;
        }
        props.setLabelMethod(scalebarjComboBox.getSelectedIndex());
        update(false);
}//GEN-LAST:event_scalebarjComboBoxItemStateChanged

    private void transparencyjComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_transparencyjComboBoxItemStateChanged
        if (bUpdating) {
            return;
        }
        props.setTransparency(transparencyjComboBox.getSelectedIndex());
        update(false);
}//GEN-LAST:event_transparencyjComboBoxItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (getRatioRange()) {
            update(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void medianFilterjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianFilterjButtonActionPerformed

        if (this.bUpdating) return;

        // Get button and spinner values.
        boolean med = medianFilterjButton.isSelected();
        double r = new Double(medianRadiusjSpinner.getValue().toString());

        // Set values in ui.
        ui.setMedianFilterRatios(med);
        ui.setMedianFilterRadius(r);

        // Recompute all ratio images.
        ui.recomputeAllRatio();

        // Recompute all hsi images.
        MimsPlus[] hsiImages = ui.getOpenHSIImages();
        for( int i = 0; i< hsiImages.length; i++) {
           hsiImages[i].recomputeInternalImages();
        }
        ui.recomputeAllHSI();       
}//GEN-LAST:event_medianFilterjButtonActionPerformed

    private void medianRadiusjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_medianRadiusjSpinnerStateChanged
        if (this.bUpdating) return;
        if (!medianFilterjButton.isSelected()) return;

        // Get radius value.
        double r = new Double(medianRadiusjSpinner.getValue().toString());

        // Set local props object and ui field.
        ui.setMedianFilterRadius(r);

        // Recompute all ratio images.
        ui.recomputeAllRatio();

        // Recompute all hsi images.
        MimsPlus[] hsiImages = ui.getOpenHSIImages();
        for( int i = 0; i< hsiImages.length; i++) {
           hsiImages[i].recomputeInternalImages();
        }
        ui.recomputeAllHSI();
}//GEN-LAST:event_medianRadiusjSpinnerStateChanged

private void rgbMinjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rgbMinjSliderStateChanged
    if (bUpdating) {
        return;
    }
    final int val = rgbMinjSlider.getValue();

    props.setMinRGB(val);
    rgbMinjLabel.setText("RGB Min: " + val);

    //change max slider limits in response
    int range = (rgbMaxjSlider.getMaximum() - rgbMaxjSlider.getMinimum());
    int spacing = java.lang.Math.round(range / 5) + 1;
    rgbMaxjSlider.setMinimum(val + 1);
    rgbMaxjSlider.setMajorTickSpacing(spacing);
    rgbMaxjSlider.setLabelTable(rgbMaxjSlider.createStandardLabels(spacing));
    rgbMaxjSlider.repaint();
    //needs to be called to update image
    update(false);
}//GEN-LAST:event_rgbMinjSliderStateChanged

private void displayRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRatiojButtonActionPerformed
   if (bUpdating)
      return;                      
   
   // Get the selected ratio images. Each element
   // should have the form 2:1 or 4:3 etc. 
   Object[] idx = jList1.getSelectedValues();
   
   // Generate images
    for (int i = 0; i < idx.length; i++) {
        String label = (String) idx[i];
        int numerator = new Integer(label.substring(0, label.indexOf(":"))).intValue();
        int denomator = new Integer(label.substring(label.indexOf(":") + 1, label.length())).intValue();
        props.setNumMass(numerator);
        props.setDenMass(denomator);
        update(false);
        computeRatio();
        MimsPlus[] ratioimages = ui.getOpenRatioImages();
        ui.autoContrastImage(ratioimages[ratioimages.length - 1]);
    }
}//GEN-LAST:event_displayRatiojButtonActionPerformed

private void addRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRatiojButtonActionPerformed

        MimsRatioManager ratioManager = MimsRatioManager.getInstance();
        if (ratioManager == null) {
            ratioManager = new MimsRatioManager(this, ui);
        }
        ratioManager.showFrame();
}//GEN-LAST:event_addRatiojButtonActionPerformed

private void removeRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRatiojButtonActionPerformed
   int index[] = jList1.getSelectedIndices();
   for (int i = index.length-1; i >= 0; i--){
      listModel.removeElementAt(index[i]);
   }
}//GEN-LAST:event_removeRatiojButtonActionPerformed

private void hsiSumRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsiSumRadioButtonActionPerformed
    if(this.bUpdating) return;

    // Update GUI
    hsiWindowRadioButton.setSelected(false);
    hsiWindowjSpinner.setEnabled(false);

    // Set isSum in ui.
    ui.setIsSum(hsiSumRadioButton.isSelected());
    ui.setIsWindow(false);

    // Recompute all ratio images.
    ui.recomputeAllRatio();

    // Recompute all hsi images.
    MimsPlus[] hsiImages = ui.getOpenHSIImages();
    for( int i = 0; i< hsiImages.length; i++) {
       hsiImages[i].recomputeInternalImages();
    }
    ui.recomputeAllHSI();
}//GEN-LAST:event_hsiSumRadioButtonActionPerformed

private void hsiWindowRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsiWindowRadioButtonActionPerformed
    if(this.bUpdating) return;

    // Update GUI.
    if (hsiWindowRadioButton.isSelected()) hsiWindowjSpinner.setEnabled(true);
    else hsiWindowjSpinner.setEnabled(false);
    hsiSumRadioButton.setSelected(false);

    // Set isWindow in ui.
    ui.setIsWindow(hsiWindowRadioButton.isSelected());
    ui.setWindowRange(new Integer(hsiWindowjSpinner.getValue().toString()));
    ui.setIsSum(false);

    // Recompute all ratio images.
    ui.recomputeAllRatio();

    // Recompute all hsi images.
    MimsPlus[] hsiImages = ui.getOpenHSIImages();
    for( int i = 0; i< hsiImages.length; i++) {
       hsiImages[i].recomputeInternalImages();
    }
    ui.recomputeAllHSI();
}//GEN-LAST:event_hsiWindowRadioButtonActionPerformed

private void hsiWindowjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hsiWindowjSpinnerStateChanged
    if(this.bUpdating) return;
    
    // Update window range in UI.
    ui.setWindowRange(new Integer(hsiWindowjSpinner.getValue().toString()));

    // Recompute all ratio images.
    ui.recomputeAllRatio();

    // Recompute all hsi images.
    MimsPlus[] hsiImages = ui.getOpenHSIImages();
    for( int i = 0; i< hsiImages.length; i++) {
       hsiImages[i].recomputeInternalImages();
    }
    ui.recomputeAllHSI();
}//GEN-LAST:event_hsiWindowjSpinnerStateChanged

public double getMedianRadius() {
    return new Double(this.medianRadiusjSpinner.getValue().toString());
}

public synchronized void update(boolean bUpdateUI) {
        if(ui == null) {
            return;
        } else if(bUpdating) {
            return;
        }
        bUpdating = true ;
        if(bUpdateUI) {     
            rartioMaxjSpinner.setValue(props.getMaxRatio());
            ratioMinjSpinner.setValue(props.getMinRatio());
            numThresholdjSpinner.setValue(props.getMinNum());
            denThresholdjSpinner.setValue(props.getMinDen());
            rgbMaxjSlider.setValue(props.getMaxRGB());
            rgbMinjSlider.setValue(props.getMinRGB());
            transparencyjComboBox.setSelectedIndex(props.getTransparency());
            scalebarjComboBox.setSelectedIndex(props.getLabelMethod());
        }      

        if(ui.getHSIImageIndex(props) != -1) {
                displayHSI();
        }
        
        bUpdating = false ;
    }

    public void updateInternalImages() {
        MimsPlus rp[] = ui.getOpenRatioImages();
        MimsPlus hp[] = ui.getOpenHSIImages();
        for (int i = 0; i < rp.length; i++) {
            rp[i].recomputeInternalImages();
        }
        for (int j = 0; j < hp.length; j++) {
            hp[j].recomputeInternalImages();
        }
    }

    public void updateImage() {
        if(ui == null)
            return;
        
        com.nrims.data.Opener image = ui.getOpener() ;
        if(image == null)
            return;
        
        bUpdating = true ;
        
        // Clear the list.
        listModel.removeAllElements();
        
        // Get all the mass names.
        String [] massNames = image.getMassNames();
                
        // Maximum difference between atomic weight
        // to appear by defualt on the ratio list.
        double maxDiff = 1.5;
        
        // Populate the list.        
        for(int i=massNames.length-1; i >= 1; i--) { 
           Double d1 = new Double(massNames[i]);
           for(int j=i-1; j >= 0; j--) {
              Double d2 = new Double(massNames[j]);
              if (Math.abs(d2-d1) <= maxDiff)
                 listModel.addElement(i+":"+j);                 
           }           
        }        
        
        // Clear selection by default
        jList1.clearSelection();
        
        bUpdating = false;        
    }
    
    public boolean getRatioRange() {
        MimsPlus[] ml = ui.getMassImages() ;
        if(props.getNumMass() > ml.length ) {
            return false;
        } else if(props.getDenMass() > ml.length ) {
            return false;
        }
        MimsPlus num = ml[props.getNumMass()];
        MimsPlus den = ml[props.getDenMass()];
        if(num == null || den == null) {
            return false;
        } else if(num.getBitDepth() != 16 || den.getBitDepth() != 16) {
            return false;
        }

        short [] numPixels = (short[])num.getProcessor().getPixels() ;
        short [] denPixels = (short[])den.getProcessor().getPixels() ;
        
        double rmax = 0.0 ;
        double rmin = 100000000.0 ;
        int nt = props.getMinNum() ;
        int dt = props.getMinDen() ;
        
        if(numPixels.length != denPixels.length) {
            return false;
        }
        for(int i = 0 ; i < numPixels.length ; i++ ) {
            if(numPixels[i] > nt && denPixels[i] > dt) {
                double r = ui.getRatioScaleFactor()*((double)numPixels[i]/(double)denPixels[i]);
                if(r > rmax) {
                    rmax = r;
                }
                else if( r < rmin ) {
                    rmin = r;
                }
            }
        }
        props.setMaxRatio(rmax);
        props.setMinRatio(rmin);
        props.setRatioScaleFactor(ui.getRatioScaleFactor());
        
        return true ;
    }
    
    public MimsPlus computeRatio() {
        return ui.computeRatio(props, true) ;
    }
    
    public boolean displayHSI() {
        return ui.computeHSI(props) ;
    }
    
    public JList getRatioList() {
       return jList1;
    }
    
    public void addToRatioList(int a, int b){
       listModel.addElement(a+":"+b);     
       System.out.println("adding element...");
    }    
    
    public HSIProps getHSIProps() { return props ; }
    
    public void setHSIProps(HSIProps props) {
        this.props.setProps(props);
        update(true);
    }

    public boolean isMedianFilterSelected() {
        return medianFilterjButton.isSelected();
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton addRatiojButton;
   private javax.swing.JSpinner denThresholdjSpinner;
   private javax.swing.JButton displayHSIjButton;
   private javax.swing.JButton displayRatiojButton;
   private javax.swing.JRadioButton hsiSumRadioButton;
   private javax.swing.JRadioButton hsiWindowRadioButton;
   private javax.swing.JSpinner hsiWindowjSpinner;
   private javax.swing.JButton jButton2;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JList jList1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JRadioButton medianFilterjButton;
   private javax.swing.JSpinner medianRadiusjSpinner;
   private javax.swing.JSpinner numThresholdjSpinner;
   private javax.swing.JSpinner rartioMaxjSpinner;
   private javax.swing.JSpinner ratioMinjSpinner;
   private javax.swing.JButton removeRatiojButton;
   private javax.swing.JLabel rgbMaxjLabel;
   private javax.swing.JSlider rgbMaxjSlider;
   private javax.swing.JLabel rgbMinjLabel;
   private javax.swing.JSlider rgbMinjSlider;
   private javax.swing.JComboBox scalebarjComboBox;
   private javax.swing.JComboBox transparencyjComboBox;
   // End of variables declaration//GEN-END:variables

 class MyCellRenderer extends JLabel implements ListCellRenderer {
    UI ui;
     public MyCellRenderer(UI ui) {
        this.ui = ui; 
        setOpaque(true);
     }
     public Component getListCellRendererComponent(JList list, Object value, int index,
                                                    boolean isSelected, boolean cellHasFocus) {
                 
        // value should be in the form 2:1 or 1:0        
        String[] num_den = ((String)value).split(":");
        int num = new Integer(num_den[0]).intValue();
        int den = new Integer(num_den[1]).intValue();
        
        // convert to the form 'Mass 13.01 / Mass 12.99'
        String[] massNames = ui.getOpener().getMassNames();
        String label = " Mass "+massNames[num]+" / Mass "+massNames[den]+" ";
        
        // set text
        setText(label);    
        
        // set color
        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
        }

        return this;
     }
 }
    
}
