/*
 * HSIView.java
 *
 * Created on May 4, 2006, 10:02 AM
 */
package com.nrims;

import java.awt.Component;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.SpinnerNumberModel;

/**
 * @author  Douglas Benson
 * @author <a href="mailto:rob.gonzalez@gmail.com">Rob Gonzalez</a>
 */
public class HSIView extends JPanel {

    public static final long serialVersionUID = 1;
    private boolean bUpdating = false;
    private UI ui = null;
    private HSIProps props = new com.nrims.HSIProps();
    private DefaultListModel listModel = new DefaultListModel();

    /**
     * @param ui UI into which the HSIView will be created.
     */
    public HSIView(UI ui) {
        this.ui = ui;
        initComponents();
        jSpinner1.setModel(new SpinnerNumberModel(1.0, 0.001, 65535.0, 1));
        jSpinner2.setModel(new SpinnerNumberModel(0.0, 0.0, 65535.0, 1));
        jSpinner3.setModel(new SpinnerNumberModel(3, 0, 65535, 1));
        jSpinner4.setModel(new SpinnerNumberModel(3, 0, 65535, 1));
        jList1.setModel(listModel);
        jList1.setCellRenderer(new MyCellRenderer(this.ui));
              
        updateImage();
    // update();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jSpinner4 = new javax.swing.JSpinner();
        rgbMaxjLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        rgbMaxjSlider = new javax.swing.JSlider();
        jRadioButton2 = new javax.swing.JRadioButton();
        jSpinner5 = new javax.swing.JSpinner();
        rgbMinjSlider = new javax.swing.JSlider();
        rgbMinjLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        hsiSumRadioButton = new javax.swing.JRadioButton();

        jTextField1.setText("jTextField1");

        jButton1.setText("Display HSI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Ratio Range");

        jLabel4.setText("Max");

        jSpinner1.setToolTipText("Max Ratio in HSI");
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jLabel5.setText("Min");

        jSpinner2.setToolTipText("Min Ratio in HSI");
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jButton2.setText("Auto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Threshold");

        jLabel7.setText("Num");

        jSpinner3.setToolTipText("Min Numerator value");
        jSpinner3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner3StateChanged(evt);
            }
        });

        jLabel8.setText("Den");

        jSpinner4.setToolTipText("Min Denominator value");
        jSpinner4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner4StateChanged(evt);
            }
        });

        rgbMaxjLabel.setText("RGB Max: 255");
        rgbMaxjLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        rgbMaxjLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        rgbMaxjLabel.setPreferredSize(new java.awt.Dimension(100, 16));

        jLabel12.setText("Transparency");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Max Num,Den", "Numerator", "Denominator", "Min Num,Den", "Mean Num,Den", "Sum Num,Den", "RMS Num,Den" }));
        jComboBox3.setToolTipText("Intensity component of HSI");
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        jLabel13.setText("Label");

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Off", "Scale", "Scale+Labels" }));
        jComboBox4.setToolTipText("Show Scale and Labels");
        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });

        rgbMaxjSlider.setFont(new java.awt.Font("Dialog", 0, 10));
        rgbMaxjSlider.setMajorTickSpacing(50);
        rgbMaxjSlider.setMaximum(255);
        rgbMaxjSlider.setPaintLabels(true);
        rgbMaxjSlider.setPaintTicks(true);
        rgbMaxjSlider.setValue(255);
        rgbMaxjSlider.setMaximumSize(new java.awt.Dimension(200, 16));
        rgbMaxjSlider.setMinimumSize(new java.awt.Dimension(200, 16));
        rgbMaxjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rgbMaxjSliderStateChanged(evt);
            }
        });

        jRadioButton2.setText("Median Filter Ratio   Radius:");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jSpinner5.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), Double.valueOf(0.5d), null, Double.valueOf(0.5d)));
        jSpinner5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner5StateChanged(evt);
            }
        });

        rgbMinjSlider.setFont(new java.awt.Font("Dialog", 0, 10));
        rgbMinjSlider.setMajorTickSpacing(50);
        rgbMinjSlider.setMaximum(255);
        rgbMinjSlider.setPaintLabels(true);
        rgbMinjSlider.setPaintTicks(true);
        rgbMinjSlider.setValue(0);
        rgbMinjSlider.setMaximumSize(new java.awt.Dimension(200, 16));
        rgbMinjSlider.setMinimumSize(new java.awt.Dimension(200, 16));
        rgbMinjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rgbMinjSliderStateChanged(evt);
            }
        });

        rgbMinjLabel.setText("RGB Min: 0");
        rgbMinjLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        rgbMinjLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        rgbMinjLabel.setPreferredSize(new java.awt.Dimension(100, 16));

        jScrollPane1.setViewportView(jList1);

        jButton4.setText("Display Ratio");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Add...");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Remove");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        hsiSumRadioButton.setText("Use Sum");
        hsiSumRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsiSumRadioButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(rgbMaxjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel12))
                            .add(rgbMinjLabel, 0, 0, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jComboBox3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel13)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jComboBox4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(rgbMaxjSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(rgbMinjSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(239, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jButton5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jButton4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(348, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel6)
                                    .add(jLabel3))
                                .add(43, 43, 43)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel7)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jSpinner3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                        .add(28, 28, 28)
                                        .add(jLabel8)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jSpinner4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                                    .add(layout.createSequentialGroup()
                                        .add(3, 3, 3)
                                        .add(jLabel4)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jSpinner1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                        .add(30, 30, 30)
                                        .add(jLabel5)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jSpinner2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(layout.createSequentialGroup()
                                .add(jRadioButton2)
                                .add(2, 2, 2)
                                .add(jSpinner5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(27, 27, 27)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jButton1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(hsiSumRadioButton))
                            .add(jButton2))
                        .add(62, 62, 62))))
        );

        layout.linkSize(new java.awt.Component[] {jSpinner1, jSpinner2, jSpinner3, jSpinner4}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jButton4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton3))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jRadioButton2)
                        .add(jSpinner5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jButton1)
                        .add(hsiSumRadioButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel6)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jSpinner1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel3)
                                .add(jLabel4))
                            .add(jLabel5)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jSpinner2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jButton2)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jSpinner3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7)
                            .add(jSpinner4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8))
                        .add(2, 2, 2)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(rgbMaxjSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rgbMaxjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(rgbMinjSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rgbMinjLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jComboBox3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel12))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jComboBox4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel13)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rgbMaxjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rgbMaxjSliderStateChanged
        if (bUpdating) {//GEN-LAST:event_rgbMaxjSliderStateChanged
            return;
        }
        final int val = rgbMaxjSlider.getValue();

        props.setMaxRGB(val);
        rgbMaxjLabel.setText("RGB Max: " + val);
        
        //change min slider limits in response
        int range = (rgbMinjSlider.getMaximum() - rgbMinjSlider.getMinimum());
        int spacing = java.lang.Math.round(range/5)+1;
        rgbMinjSlider.setMaximum(val-1);
        rgbMinjSlider.setMajorTickSpacing(spacing);
        rgbMinjSlider.setLabelTable(rgbMinjSlider.createStandardLabels(spacing)); 
        rgbMinjSlider.repaint();
        //needs to be called to update image
        update(false);

}                                          

    private void jSpinner4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner4StateChanged
        if (bUpdating) {
            return;
        }
        props.setMinDen(new Integer(jSpinner4.getValue().toString()));
        update(false);
    }//GEN-LAST:event_jSpinner4StateChanged

    private void jSpinner3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner3StateChanged
        if (bUpdating) {
            return;
        }
        props.setMinNum(new Integer(jSpinner3.getValue().toString()));
        update(false);
    }//GEN-LAST:event_jSpinner3StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        if (bUpdating) {
            return;
        }
        props.setMinRatio(new Double(jSpinner2.getValue().toString()));
        update(false);
    }//GEN-LAST:event_jSpinner2StateChanged

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
       if (bUpdating) {
            return;
        }
        props.setMaxRatio(new Double(jSpinner1.getValue().toString()));
        update(false);
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (bUpdating) {
            return;        
        // Get the selected ratio images. Each element
        // should have the form 2:1 or 4:3 etc. 
        }
        Object[] idx = jList1.getSelectedValues();

        // Generate images
        for (int i = 0; i < idx.length; i++) {
            String label = (String) idx[i];
            int numerator = new Integer(label.substring(0, label.indexOf(":"))).intValue();
            int denomator = new Integer(label.substring(label.indexOf(":") + 1, label.length())).intValue();
            props.setNumMass(numerator);
            props.setDenMass(denomator);
            props.setDynamic(!this.hsiSumRadioButton.isSelected());
            update(false);
            displayHSI();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
        if (bUpdating) {
            return;
        }
        props.setLabelMethod(jComboBox4.getSelectedIndex());
        update(false);
    }//GEN-LAST:event_jComboBox4ItemStateChanged

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        if (bUpdating) {
            return;
        }
        props.setTransparency(jComboBox3.getSelectedIndex());
        update(false);
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (getRatioRange()) {
            update(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
   ui.setMedianFilterRatios(jRadioButton2.isSelected());

   ui.recomputeAllRatio();
   ui.recomputeAllHSI();
   MimsPlus[] ratioimages = ui.getOpenRatioImages();
       for (int i = 0; i < ratioimages.length; i++) {
           ui.autoContrastImage(ratioimages[i]);
       }
   ui.getCBControl().updateHistogram();
       
}//GEN-LAST:event_jRadioButton2ActionPerformed

private void jSpinner5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner5StateChanged
    if (jRadioButton2.isSelected()){
       ui.recomputeAllRatio();
       ui.recomputeAllHSI();
    }
    MimsPlus[] ratioimages = ui.getOpenRatioImages();
    for (int i = 0; i < ratioimages.length; i++) {
       ui.autoContrastImage(ratioimages[i]);
    }
    
    
}//GEN-LAST:event_jSpinner5StateChanged

private void rgbMinjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rgbMinjSliderStateChanged
    if (bUpdating) {
        return;
    }
    final int val = rgbMinjSlider.getValue();

    props.setMinRGB(val);
    rgbMinjLabel.setText("RGB Min: " + val);

    //change max slider limits in response
    int range = (rgbMaxjSlider.getMaximum() - rgbMaxjSlider.getMinimum());
    int spacing = java.lang.Math.round(range / 5) + 1;
    rgbMaxjSlider.setMinimum(val + 1);
    rgbMaxjSlider.setMajorTickSpacing(spacing);
    rgbMaxjSlider.setLabelTable(rgbMaxjSlider.createStandardLabels(spacing));
    rgbMaxjSlider.repaint();
    //needs to be called to update image
    update(false);
}//GEN-LAST:event_rgbMinjSliderStateChanged

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
   if (bUpdating)
      return;                      
   
   // Get the selected ratio images. Each element
   // should have the form 2:1 or 4:3 etc. 
   Object[] idx = jList1.getSelectedValues();
   
   // Generate images
    for (int i = 0; i < idx.length; i++) {
        String label = (String) idx[i];
        int numerator = new Integer(label.substring(0, label.indexOf(":"))).intValue();
        int denomator = new Integer(label.substring(label.indexOf(":") + 1, label.length())).intValue();
        props.setNumMass(numerator);
        props.setDenMass(denomator);
        update(false);
        computeRatio();
        MimsPlus[] ratioimages = ui.getOpenRatioImages();
        ui.autoContrastImage(ratioimages[ratioimages.length - 1]);
    }
}//GEN-LAST:event_jButton4ActionPerformed

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        MimsRatioManager ratioManager = MimsRatioManager.getInstance();
        if (ratioManager == null) {
            ratioManager = new MimsRatioManager(this, ui);
        }
        ratioManager.showFrame();
}//GEN-LAST:event_jButton5ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
   int index[] = jList1.getSelectedIndices();
   for (int i = index.length-1; i >= 0; i--){
      listModel.removeElementAt(index[i]);
   }
}//GEN-LAST:event_jButton3ActionPerformed

private void hsiSumRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsiSumRadioButtonActionPerformed
    if(this.bUpdating) return;

    props.setDynamic(!this.hsiSumRadioButton.isSelected());
    update(false);
}//GEN-LAST:event_hsiSumRadioButtonActionPerformed

public double getMedianRadius() {
    return new Double(this.jSpinner5.getValue().toString());
}

public void resetRatioSpinners(HSIProps argprop) {
    double min = argprop.getMinRatio();
    double max = argprop.getMaxRatio();
}

public synchronized void update(boolean bUpdateUI) {
        if(ui == null) {
            return;
        } else if(bUpdating) {
            return;
        }
        bUpdating = true ;
        if(bUpdateUI) {     
            jSpinner1.setValue(props.getMaxRatio());
            jSpinner2.setValue(props.getMinRatio());
            jSpinner3.setValue(props.getMinNum());
            jSpinner4.setValue(props.getMinDen());  
            rgbMaxjSlider.setValue(props.getMaxRGB());
            rgbMinjSlider.setValue(props.getMinRGB());
            jComboBox3.setSelectedIndex(props.getTransparency());
            jComboBox4.setSelectedIndex(props.getLabelMethod());
            hsiSumRadioButton.setSelected(!props.getDynamic());
        }
        
        jButton1.setEnabled(props.getNumMass() != props.getDenMass());

        if(ui.getHSIImageIndex(props) != -1) {
            displayHSI();
        }
        
        bUpdating = false ;
    }
    
    public void updateImage() {
        if(ui == null)
            return;
        
        com.nrims.data.Opener image = ui.getOpener() ;
        if(image == null)
            return;
        
        bUpdating = true ;
        
        // Clear the list.
        listModel.removeAllElements();
        
        // Get all the mass names.
        String [] massNames = image.getMassNames();
                
        // Populate the list.
        for(int i=1; i < massNames.length; i++, i++) {
           listModel.addElement(i+":"+(i-1));                 
        }
        
        // Clear selection by default
        jList1.clearSelection();
        
        bUpdating = false;        
    }
    
    public boolean getRatioRange() {
        MimsPlus[] ml = ui.getMassImages() ;
        if(props.getNumMass() > ml.length ) {
            return false;
        } else if(props.getDenMass() > ml.length ) {
            return false;
        }
        MimsPlus num = ml[props.getNumMass()];
        MimsPlus den = ml[props.getDenMass()];
        if(num == null || den == null) {
            return false;
        } else if(num.getBitDepth() != 16 || den.getBitDepth() != 16) {
            return false;
        }

        short [] numPixels = (short[])num.getProcessor().getPixels() ;
        short [] denPixels = (short[])den.getProcessor().getPixels() ;
        
        double rmax = 0.0 ;
        double rmin = 100000000.0 ;
        int nt = props.getMinNum() ;
        int dt = props.getMinDen() ;
        
        if(numPixels.length != denPixels.length) {
            return false;
        }
        for(int i = 0 ; i < numPixels.length ; i++ ) {
            if(numPixels[i] > nt && denPixels[i] > dt) {
                double r = ui.getRatioScaleFactor()*((double)numPixels[i]/(double)denPixels[i]);
                if(r > rmax) {
                    rmax = r;
                }
                else if( r < rmin ) {
                    rmin = r;
                }
            }
        }
        props.setMaxRatio(rmax);
        props.setMinRatio(rmin);
        props.setRatioScaleFactor(ui.getRatioScaleFactor());
        
        return true ;
    }
    
    public MimsPlus computeRatio() {
        return ui.computeRatio(props, true) ;
    }
    
    public boolean displayHSI() {
        return ui.computeHSI(props) ;
    }
    
    public JList getRatioList() {
       return jList1;
    }
    
    public void addToRatioList(int a, int b){
       listModel.addElement(a+":"+b);     
       System.out.println("adding element...");
    }    
    
    public HSIProps getHSIProps() { return props ; }
    
    public void setHSIProps(HSIProps props) {
        this.props.setProps(props);
        update(true);
    }

    public boolean isMedianFilterSelected() {
        return jRadioButton2.isSelected();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton hsiSumRadioButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList jList1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel rgbMaxjLabel;
    private javax.swing.JSlider rgbMaxjSlider;
    private javax.swing.JLabel rgbMinjLabel;
    private javax.swing.JSlider rgbMinjSlider;
    // End of variables declaration//GEN-END:variables

 class MyCellRenderer extends JLabel implements ListCellRenderer {
    UI ui;
     public MyCellRenderer(UI ui) {
        this.ui = ui; 
        setOpaque(true);
     }
     public Component getListCellRendererComponent(JList list, Object value, int index,
                                                    boolean isSelected, boolean cellHasFocus) {
                 
        // value should be in the form 2:1 or 1:0        
        String[] num_den = ((String)value).split(":");
        int num = new Integer(num_den[0]).intValue();
        int den = new Integer(num_den[1]).intValue();
        
        // convert to the form 'Mass 13.01 / Mass 12.99'
        String[] massNames = ui.getOpener().getMassNames();
        String label = " Mass "+massNames[num]+" / Mass "+massNames[den]+" ";
        
        // set text
        setText(label);    
        
        // set color
        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
        }

        return this;
     }
 }
    
}
