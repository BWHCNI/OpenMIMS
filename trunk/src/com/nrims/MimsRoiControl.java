/*
 * mimsRoiControl.java
 *
 * Created on May 3, 2006, 9:57 AM
 */

package com.nrims;

import ij.*;
import ij.process.*;
import ij.gui.*;
import java.awt.*;

import com.nrims.UI;
import ij.plugin.filter.RGBStackSplitter;
import ij.gui.Roi;
import ij.process.FloatProcessor;
import ij.process.ImageProcessor;
import ij.process.ShortProcessor;
import java.awt.Frame;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Enumeration;
import javax.swing.JFileChooser;
/**
 *
 * @author  Douglas Benson
 */
public class MimsRoiControl extends javax.swing.JPanel {
    
    /**
     * Creates new form mimsRoiControl
     */
    public MimsRoiControl(UI ui) {
        this.ui = ui ;
        measure = new Measure(ui);
        initComponents();
        
//        this.jButton5.setVisible(false);
//        this.jButton6.setVisible(false);
//        this.jTextField3.setVisible(false);
//        this.jLabel2.setVisible(false);
//        this.jLabel3.setVisible(false);
//        this.jCheckBox5.setVisible(false);
//        this.jTextField2.setVisible(false);
//        this.featuresButton.setVisible(false);
        
        jCheckBox2.setSelected(ui.getSyncROIs());
        jCheckBox3.setSelected(ui.getAddROIs());
        jCheckBox5.setSelected(ui.getSyncROIsAcrossPlanes());
        jTextField1.setText(ui.getMimsImage().getImageFile().getName()+".txt");
        measure.setName(jTextField1.getText());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jCheckBox2 = new javax.swing.JCheckBox();
      jCheckBox3 = new javax.swing.JCheckBox();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();
      jCheckBox1 = new javax.swing.JCheckBox();
      jCheckBox4 = new javax.swing.JCheckBox();
      jLabel1 = new javax.swing.JLabel();
      jTextField1 = new javax.swing.JTextField();
      jButton5 = new javax.swing.JButton();
      testButton = new javax.swing.JButton();
      jCheckBox5 = new javax.swing.JCheckBox();

      setToolTipText("Drawing ROIs automatically adds to RoiManager");

      jCheckBox2.setText("Synchronize ROIs across all masses");
      jCheckBox2.setToolTipText("Display ROI in all images");
      jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jCheckBox2.setMargin(new java.awt.Insets(0, 0, 0, 0));
      jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jCheckBox2ItemStateChanged(evt);
         }
      });

      jCheckBox3.setText("Add ROIs");
      jCheckBox3.setToolTipText("Automatically add ROs to the RoiManager");
      jCheckBox3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jCheckBox3.setMargin(new java.awt.Insets(0, 0, 0, 0));
      jCheckBox3.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jCheckBox3ItemStateChanged(evt);
         }
      });

      jButton1.setText("RoiManager");
      jButton1.setToolTipText("Launch RoiManager");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
         }
      });

      jButton2.setText("Measure All Rois");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
         }
      });

      jButton3.setText("Data Options...");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
         }
      });

      jButton4.setText("Source images...");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
         }
      });

      jCheckBox1.setText("Measure All Sections");
      jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

      jCheckBox4.setText("Append to table");
      jCheckBox4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jCheckBox4.setMargin(new java.awt.Insets(0, 0, 0, 0));

      jLabel1.setText("Table Name");

      jTextField1.setText("NRIMS.txt");
      jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            jTextField1KeyPressed(evt);
         }
      });

      jButton5.setText("Measure Sum Images");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
         }
      });

      testButton.setText("test");
      testButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            testButtonActionPerformed(evt);
         }
      });

      jCheckBox5.setText("Synchronize ROIs across all planes ");
      jCheckBox5.setToolTipText("Display ROI in all images");
      jCheckBox5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jCheckBox5.setMargin(new java.awt.Insets(0, 0, 0, 0));
      jCheckBox5.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jCheckBox5ItemStateChanged(evt);
         }
      });
      jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBox5ActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(layout.createSequentialGroup()
                  .add(jCheckBox3)
                  .add(46, 46, 46)
                  .add(jButton1)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 197, Short.MAX_VALUE)
                  .add(testButton)
                  .add(73, 73, 73))
               .add(layout.createSequentialGroup()
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(layout.createSequentialGroup()
                        .add(jCheckBox1)
                        .add(26, 26, 26)
                        .add(jCheckBox4))
                     .add(layout.createSequentialGroup()
                        .add(jButton2)
                        .add(27, 27, 27)
                        .add(jButton5))
                     .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                     .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jButton4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                  .addContainerGap(225, Short.MAX_VALUE))
               .add(layout.createSequentialGroup()
                  .add(jCheckBox5)
                  .addContainerGap(319, Short.MAX_VALUE))
               .add(layout.createSequentialGroup()
                  .add(jCheckBox2)
                  .addContainerGap(317, Short.MAX_VALUE))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(4, 4, 4)
            .add(jCheckBox5)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jCheckBox2)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                  .add(jButton1)
                  .add(testButton))
               .add(jCheckBox3))
            .add(22, 22, 22)
            .add(jButton4)
            .add(10, 10, 10)
            .add(jButton3)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jCheckBox1)
               .add(jCheckBox4))
            .add(14, 14, 14)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel1)
               .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(14, 14, 14)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jButton2)
               .add(jButton5))
            .addContainerGap(50, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        if(evt.getKeyChar() == '\t' || evt.getKeyChar() == '\n')
            measure.setName(jTextField1.getText());
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        measure.getSourceOptions();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        measure.getDataOptions();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        // If not appending reset the data in the table
        if(!jCheckBox4.isSelected()) 
           measure.reset();
        
        if(jCheckBox5.isSelected()) 
           measure.generateStackTable();
        else 
           measure.generateRoiTable();
        ij.WindowManager.getFrame(measure.getName()).setSize(450, 300);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ui.getRoiManager().showFrame();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox3ItemStateChanged
        ui.setAddROIs(jCheckBox3.isSelected());
    }//GEN-LAST:event_jCheckBox3ItemStateChanged

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        ui.setSyncROIs(jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
    // If not appending reset the data in the table
    if(jCheckBox4.isSelected() == false ) measure.reset();
    measure.measureSums(jCheckBox3.isSelected());
    
    if (ij.WindowManager.getFrame(measure.getName()) != null) {
        ij.WindowManager.getFrame(measure.getName()).setSize(450, 300);
        ij.WindowManager.getFrame(measure.getName());
    }
}//GEN-LAST:event_jButton5ActionPerformed

private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
// TODO add your handling code here:
    
    //testing trying to grab screen pixels from image for rois and annotations
    

	/** Captures the active image window and returns it as an ImagePlus. */

    ImagePlus imp = ij.WindowManager.getCurrentImage();
    if (imp == null) {
        IJ.noImage();
        return;
    }
    ImagePlus imp2 = null;
    try {
        ImageWindow win = imp.getWindow();
        if (win == null) {
            return;
        }
        win.toFront();
        Point loc = win.getLocation();
        //canvas type?
        ImageCanvas ic = win.getCanvas();
        ic.update(ic.getGraphics());
        
        Rectangle bounds = ic.getBounds();
        loc.x += bounds.x;
        loc.y += bounds.y;
        Rectangle r = new Rectangle(loc.x, loc.y, bounds.width, bounds.height);
        Robot robot = new Robot();
        Image img = robot.createScreenCapture(r);
        if (img != null) {
            imp2 = new ImagePlus("Grab of " + imp.getTitle(), img);
            imp2.show();
        }
    } catch (Exception e) {
    }
}//GEN-LAST:event_testButtonActionPerformed

private void jCheckBox5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox5ItemStateChanged
// TODO add your handling code here:   
   ui.setSyncROIsAcrossPlanes(jCheckBox5.isSelected());
   WindowManager.getCurrentImage().updateAndRepaintWindow();   
   //WindowManager.repaintImageWindows();
}//GEN-LAST:event_jCheckBox5ItemStateChanged

public void setROIsSynchedAcrossPlanes(boolean setSynched) {
   jCheckBox5.setSelected(setSynched);
}

private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jCheckBox5ActionPerformed
   
    private com.nrims.UI ui = null ;
    private com.nrims.Measure measure = null ;
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JCheckBox jCheckBox1;
   private javax.swing.JCheckBox jCheckBox2;
   private javax.swing.JCheckBox jCheckBox3;
   private javax.swing.JCheckBox jCheckBox4;
   private javax.swing.JCheckBox jCheckBox5;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JButton testButton;
   // End of variables declaration//GEN-END:variables
    
}
